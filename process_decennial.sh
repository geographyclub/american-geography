#!/bin/bash

# convert characters and clean up files
ls *Data.csv | while read file; do
  cat ${file} | awk 'NR!=2' | iconv -f latin1 -t ascii//TRANSLIT | sed -e 's/,$//g' > ${file%.*}_iconv.csv
done

# create tables and import
table=dp05_puma2020
file=ACSDP5Y2020.DP05-Data_iconv.csv
psql -d us -c "DROP TABLE IF EXISTS ${table}; CREATE TABLE ${table}($(head -1 ${file} | sed -e 's/"//g' -e 's/,/ VARCHAR,/g' -e 's/$/ VARCHAR/g' -e 's/,$//g'));"
psql -d us -c "\COPY ${table} FROM ${file} WITH CSV HEADER;"

# join tables
table=us2020_decennial
psql -d us -c "DROP TABLE IF EXISTS ${table}; CREATE TABLE ${table} AS SELECT a.*, REGEXP_REPLACE(b.geo_id, '^.*US', '') AS geoid, b.h1_001n, b.h1_001na, b.h1_002n, b.h1_002na, b.h1_003n, b.h1_003na FROM ${table%_*}_p1 a, ${table%_*}_h1 b WHERE a.geo_id = b.geo_id;"

### export geojson
psql -qAtX -d us -c '\d county2020_decennial;' | grep -v "geom" | grep -v "geo_id" | grep -v "geoid" | grep -v "name" | grep -v "na" | sed -e 's/|.*//g' | while read column; do
  psql -d us -c "COPY (SELECT jsonb_build_object('type', 'FeatureCollection', 'features', jsonb_agg(feature)) FROM (SELECT jsonb_build_object('type', 'Feature', 'id', note, 'geometry', ST_AsGeoJSON(ST_Transform(geom,4326))::jsonb, 'properties', to_jsonb(inputs) - 'geom') AS feature FROM (WITH stats AS (SELECT DISTINCT PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY ${column}::real) q1, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY ${column}::real) q2, PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY ${column}::real) q3 FROM county2020_decennial WHERE ${column}::text ~ '^[0-9\\\.]+$') (SELECT 1 AS row, 'US' AS name, NULL AS state, a.${column}::real AS value, NULL AS rank, NULL AS note, NULL::real AS min, NULL::real AS max, NULL AS geom FROM us2020_decennial a WHERE a.${column}::text ~ '^[0-9\\\.]+$') UNION ALL (SELECT ROW_NUMBER () OVER (ORDER BY a.${column}::real DESC) AS row, a.name, NULL AS state, a.${column}::real AS value, RANK() OVER (ORDER BY a.${column}::real DESC) rank, 'state_rank' AS note, NULL::real AS min, NULL::real AS max, b.geom AS geom FROM state2020_decennial a, ne_10m_admin_1_states_provinces_lakes b WHERE a.${column}::text ~ '^[0-9\\\.]+$' AND a.name = b.name ORDER BY a.${column}::real DESC) UNION ALL (SELECT ROW_NUMBER () OVER (ORDER BY a.${column}::real DESC) AS row, a.name, c.name AS state, a.${column}::real AS value, RANK() OVER (ORDER BY a.${column}::real DESC) rank, 'top_ten' AS note, NULL AS min, NULL AS max, b.geom AS geom FROM county2020_decennial a, ne_10m_admin_2_counties_lakes b, state2020_decennial c WHERE a.${column}::text ~ '^[0-9\\\.]+$' AND a.geoid = b.code_local AND SUBSTRING(a.geoid,1,2) = c.geoid ORDER BY a.${column}::real DESC LIMIT 10) UNION ALL (SELECT ROW_NUMBER () OVER (ORDER BY a.${column}::real) AS row, a.name, c.name AS state, a.${column}::real AS value, RANK() OVER (ORDER BY a.${column}::real) rank, 'bottom_ten' AS note, NULL AS min, NULL AS max, b.geom AS geom FROM county2020_decennial a, ne_10m_admin_2_counties_lakes b, state2020_decennial c WHERE a.${column}::text ~ '^[0-9\\\.]+$' AND a.geoid = b.code_local AND SUBSTRING(a.geoid,1,2) = c.geoid ORDER BY a.${column}::real LIMIT 10) UNION ALL SELECT 1 AS row, NULL AS name, NULL AS state, NULL AS value, NULL AS rank, 'q1' AS note, MIN(${column}::real) AS min, MAX(${column}::real) AS max, ST_Union(ST_Buffer(b.geom,0)) AS geom FROM county2020_decennial a, ne_10m_admin_2_counties_lakes b, stats WHERE a.${column}::text ~ '^[0-9\\\.]+$' AND a.${column}::real < stats.q1 AND a.geoid = b.code_local UNION ALL SELECT 1 AS row, NULL AS name, NULL AS state, NULL AS value, NULL AS rank, 'q2' AS note, MIN(${column}::real) AS min, MAX(${column}::real) AS max, ST_Union(ST_Buffer(b.geom,0)) AS geom FROM county2020_decennial a, ne_10m_admin_2_counties_lakes b, stats WHERE a.${column}::text ~ '^[0-9\\\.]+$' AND a.${column}::real >= stats.q1 AND a.${column}::real < stats.q2 AND a.geoid = b.code_local UNION ALL SELECT 1 AS row, NULL AS name, NULL AS state, NULL AS value, NULL AS rank, 'q3' AS note, MIN(${column}::real) AS min, MAX(${column}::real) AS max, ST_Union(ST_Buffer(b.geom,0)) AS geom FROM county2020_decennial a, ne_10m_admin_2_counties_lakes b, stats WHERE a.${column}::text ~ '^[0-9\\\.]+$' AND a.${column}::real >= stats.q2 AND a.${column}::real < stats.q3 AND a.geoid = b.code_local UNION ALL SELECT 1 AS row, NULL AS name, NULL AS state, NULL AS value, NULL AS rank, 'q4' AS note, MIN(${column}::real) AS min, MAX(${column}::real) AS max, ST_Union(ST_Buffer(b.geom,0)) AS geom FROM county2020_decennial a, ne_10m_admin_2_counties_lakes b, stats WHERE a.${column}::text ~ '^[0-9\\\.]+$' AND a.${column}::real >= stats.q3 AND a.geoid = b.code_local) inputs) features) TO STDOUT;" > /home/steve/maps/us/geojson/county2020/county2020_${column}.geojson
done

